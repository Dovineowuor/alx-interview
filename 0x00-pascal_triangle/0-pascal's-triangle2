#!/usr/bin/python3
'''pascal_triangle
'''


def pascal_triangle(n):
    '''
    function def pascal_triangle(n):
    that returns a list of lists of integers
    representing the Pascalâ€™s triangle of n:
    Returns an empty list if n <= 0
    You can assume n will be always an integer
    '''
    triangle = []
    if n <= 0:
        triangle
    else:
        for i in range(n):
            row = [1] * (i + 1)
            for j in range(1, i):
                row[j] = triangle[i-1][j-1] + triangle[i-1][j]
            triangle.append(row)
    return triangle

# SAmple test code 3 below

# triangle = list()
# triangle.append([1])


# def pascal_triangle(n):
#     """
#     Return a list of lists of intergers representing the Pascal's Triangle.

#     temp is temporary list to be storing the elements of to manipulate /
#     to form the new row.
#     row will be every new row of the values of that row position.
#     sumNextValue will be the sum of the values that forms the current row.

#     Args:
#         n (int): The number of rows of the triangle.
#     """
#     if n <= 0:
#         return list()
#     else:
#         for i in range(n - 1):
#             temp = [0] + triangle[-1] + [0]
#             row = list()
#             for j in range(len(triangle[-1]) + 1):
#                 sumNextVal = temp[j] + temp[j + 1]
#                 row.append(sumNextVal)
#             triangle.append(row)
#         return triangle
